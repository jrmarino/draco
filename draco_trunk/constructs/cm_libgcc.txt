##
##  DRACO ADA COMPILER
##  CMAKE BUILD SCRIPT - STATIC LIBRARY LIBGCC
##
##
##  Copyright (c) 2010, John Marino (www.auroraux.org)
##  All rights reserved.
##
##  Permission to use, copy, modify, and/or distribute this software for any
##  purpose with or without fee is hereby granted, provided that the above
##  copyright notice and this permission notice appear in all copies.
##
##  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
##  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
##  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
##  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
##  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
##  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
##  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
##
#
#
# We need a static version of the libgcc library, and we don't need the "intrinsic"
# math functions.  GCC builds each function separately as an object file rather
# monolithicly.  This avoids function overloading and other issues, but makes
# the library build a lot more complicated.  Luckily we can just comment all these
# functions out (which can be manually requested via macro definition) and just
# not worry about them.


set (libgcc_definitions_list
#   -DL_negdi2
#   -DL_udiv_w_sdiv
#   -DL_addvsi3
#   -DL_addvdi3
#   -DL_subvsi3
#   -DL_subvdi3
#   -DL_mulvsi3
#   -DL_negvsi2
#   -DL_negvdi2
#   -DL_absvsi2
#   -DL_absvdi2
#   -DL_mulvdi3
#   -DL_lshrdi3
#   -DL_ashldi3
#   -DL_ashrdi3
#   -DL_bswapsi2
#   -DL_bswapdi2
#   -DL_ffssi2
#   -DL_ffsdi2
#   -DL_muldi3
#   -DL_divdi3
#   -DL_moddi3
#   -DL_udivdi3
#   -DL_umoddi3
#   -DL_clz
#   -DL_clzsi2
#   -DL_clzdi2
#   -DL_ctzsi2
#   -DL_ctzdi2
#   -DL_popcount_tab
#   -DL_popcountsi2
#   -DL_popcountdi2
#   -DL_paritysi2
#   -DL_paritydi2
#   -DL_cmpdi2
#   -DL_ucmpdi2
#   -DL_fixunstfdi
#   -DL_fixtfdi
#   -DL_fixunsxfdi
#   -DL_fixxfdi
#   -DL_fixunsdfdi
#   -DL_fixdfdi
#   -DL_fixunssfdi
#   -DL_fixsfdi
#   -DL_floatdixf
#   -DL_floatundixf
#   -DL_floatditf
#   -DL_floatunditf
#   -DL_floatdisf
#   -DL_floatdidf
#   -DL_floatundisf
#   -DL_floatundidf
#   -DL_fixunsxfsi
#   -DL_fixunsdfsi
#   -DL_fixunssfsi
#   -DL_powisf2
#   -DL_powidf2
#   -DL_powixf2
#   -DL_powitf2
#   -DL_mulsc3
#   -DL_muldc3
#   -DL_mulxc3
#   -DL_multc3
#   -DL_divsc3
#   -DL_divdc3
#   -DL_divxc3
#   -DL_divtc3
#   -DL_eprintf


   -DL__gcc_bcmp
   -DL_clear_cache
   -DL_enable_execute_stack
   -DL_trampoline
   -DL__main
   -DL_ctors
)








# Macro definitions.  These are same for native and xeno
set (task_macros
   -DIN_GCC
   -DIN_LIBGCC2
   -D__GCC_FLOAT_NOT_NEEDED
   ${GTHREAD_FLAGS}
)

# Compiler flags.  Target values are constant,
# even between native and xeno builds (only host and compiler varies)
set (task_flags
   -O2
   ${CFLAGS_FOR_TARGET}
   ${LOOSE_WARN}
   ${C_LOOSE_WARN}
   -Wold-style-definition
   ${TARGET_LIBGCC2_CFLAGS}
   -g
)

# defined include directories.  The c_objects needed to be removed later
# for cross-compiler profiles
include_directories (
   ${DIR_REMNANTS}/include
   ${DIR_REMNANTS}/gcc
   ${DIR_HEADERS}
)

# base directory for gcc files
set (base ${DIR_REMNANTS}/gcc)



# Tell CMAKE where to build the library

add_definitions  (${task_macros} ${libgcc_definitions_list} ${task_flags})

set (task_source
   ${base}/libgcc2.c
   ${base}/emutls.c
 )


if (${CURRENT_STAGE} EQUAL 1)

   add_dependencies  (libgcc_stage1 gcc)
   add_library       (gcc STATIC ${task_source})

elseif (${CURRENT_STAGE} EQUAL 2)

   #so a bootstrap compiler will be statically linked to libgcc2 rather than libgcc
   add_dependencies  (libgcc_stage2 gcc2)
   add_library       (gcc2 STATIC ${task_source})

else (${CURRENT_STAGE} EQUAL 3)

   #so a bootstrap compiler will be statically linked to libgcc3 rather than libgcc
   add_dependencies  (libgcc_stage3 gcc3)
   add_library       (gcc3 STATIC ${task_source})

endif ()





