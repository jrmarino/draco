##
##  DRACO ADA COMPILER
##  CMAKE BUILD SCRIPT - STATIC LIBRARY LIBGCC_DRACO.A
##
##
##  Copyright (c) 2010, John Marino (www.auroraux.org)
##  All rights reserved.
##
##  Permission to use, copy, modify, and/or distribute this software for any
##  purpose with or without fee is hereby granted, provided that the above
##  copyright notice and this permission notice appear in all copies.
##
##  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
##  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
##  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
##  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
##  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
##  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
##  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
##
#
#
# We need a static version of the libgcc library, and we don't need the "intrinsic"
# math functions.  GCC builds each function separately as an object file rather
# monolithicly.  This avoids function overloading and other issues, but makes
# the library build a lot more complicated.  Luckily we can just comment all these
# functions out (which can be manually requested via macro definition) and just
# not worry about them.


set (libgcc_definitions_list
#   -DL_negdi2
#   -DL_udiv_w_sdiv
#   -DL_addvsi3
#   -DL_addvdi3
#   -DL_subvsi3
#   -DL_subvdi3
#   -DL_mulvsi3
#   -DL_negvsi2
#   -DL_negvdi2
#   -DL_absvsi2
#   -DL_absvdi2
#   -DL_mulvdi3
#   -DL_lshrdi3
#   -DL_ashldi3
#   -DL_ashrdi3
#   -DL_bswapsi2
#   -DL_bswapdi2
#   -DL_ffssi2
#   -DL_ffsdi2
#   -DL_muldi3
#   -DL_divdi3
#   -DL_moddi3
#   -DL_udivdi3
#   -DL_umoddi3
#   -DL_clz
#   -DL_clzsi2
#   -DL_clzdi2
#   -DL_ctzsi2
#   -DL_ctzdi2
#   -DL_popcount_tab
#   -DL_popcountsi2
#   -DL_popcountdi2
#   -DL_paritysi2
#   -DL_paritydi2
#   -DL_cmpdi2
#   -DL_ucmpdi2
#   -DL_fixunstfdi
#   -DL_fixtfdi
#   -DL_fixunsxfdi
#   -DL_fixxfdi
#   -DL_fixunsdfdi
#   -DL_fixdfdi
#   -DL_fixunssfdi
#   -DL_fixsfdi
#   -DL_floatdixf
#   -DL_floatundixf
#   -DL_floatditf
#   -DL_floatunditf
#   -DL_floatdisf
#   -DL_floatdidf
#   -DL_floatundisf
#   -DL_floatundidf
#   -DL_fixunsxfsi
#   -DL_fixunsdfsi
#   -DL_fixunssfsi
#   -DL_powisf2
#   -DL_powidf2
#   -DL_powixf2
#   -DL_powitf2
#   -DL_mulsc3
#   -DL_muldc3
#   -DL_mulxc3
#   -DL_multc3
#   -DL_divsc3
#   -DL_divdc3
#   -DL_divxc3
#   -DL_divtc3
#   -DL_eprintf


   -DL__gcc_bcmp
   -DL_clear_cache
   -DL_enable_execute_stack
   -DL_trampoline
   -DL__main
   -DL_ctors
)




# Tell CMAKE where to build the library
set (LIBRARY_OUTPUT_PATH ${DIR_C_OBJS}/lib)


set (libgcc_compilation_flags
   -g
   -O2
   -W
   -Wall
   -Wwrite-strings
   -Wcast-qual
   -Wstrict-prototypes
   -Wmissing-prototypes
   -Wold-style-definition
   -fPIC
   -pthread
   -DHAVE_GTHR_DEFAULT
   -DIN_GCC
   -DIN_LIBGCC2
   -D__GCC_FLOAT_NOT_NEEDED
   -DHAVE_CC_TLS
   -fexceptions
   -fnon-call-exceptions
   -fvisibility=hidden
   -DHIDE_EXPORTS
)

# change gthr-gnat.c to gthr-posix.c
set (libgcc_source_files
   ${DIR_REMNANTS}/gcc/libgcc2.c
   ${DIR_REMNANTS}/gcc/unwind-dw2.c
   ${DIR_REMNANTS}/gcc/unwind-dw2-fde.c
   ${DIR_REMNANTS}/gcc/unwind-sjlj.c
   ${DIR_REMNANTS}/gcc/unwind-c.c
   ${DIR_REMNANTS}/gcc/gthr-gnat.c
   ${DIR_REMNANTS}/gcc/emutls.c
)


#add_definitions (${libgcc_definitions_list})
add_definitions (${libgcc_compilation_flags})

include_directories (${DIR_C_OBJS} ${DIR_REMNANTS}/gcc ${DIR_REMNANTS}/include)
#add_library (gcc_draco STATIC ${libgcc_source_files})

#add_definitions (${libgcc_compilation_flags})
#remove_definitions (${libgcc_definitions_list})



function (build_static_library libname dep_files src_files macros flags incldir_list)

   add_definitions (${flags})
   add_definitions (${macros})

   include_directories (${DIR_C_OBJS} ${DIR_REMNANTS}/include ${DIR_REMNANTS}/gcc)

   add_library (${libname} STATIC ${src_files})

   remove_definitions (${macros})
   remove_definitions (${flags})

endfunction (build_static_library)





function (build_libgcc_eh)

   set (base "${DIR_REMNANTS}/gcc")
   set (task_dependencies
      ${base}/unwind-pe.h
      ${base}/unwind.inc
      ${base}/unwind-dw2.h
      ${base}/unwind-dw2-fde.h
      ${base}/unwind-generic.h

      ${DIR_C_OBJS}/tconfig.h
   )
   set (task_source_files
      ${base}/gthr-gnat.c
      ${base}/unwind-dw2.c
      ${base}/unwind-dw2-fde.c
      ${base}/unwind-sjlj.c
      ${base}/unwind-c.c
    )
   set (test_macros
      -DHAVE_GTHR_DEFAULT
      -DIN_GCC
      -DIN_LIBGCC2
      -D__GCC_FLOAT_NOT_NEEDED
      -DHAVE_CC_TLS
      -DHIDE_EXPORTS
   )
   set (test_flags
      -g
      -O2
      -W
      -Wall
      -Wwrite-strings
      -Wcast-qual
      -Wstrict-prototypes
      -Wmissing-prototypes
      -Wold-style-definition
      -fPIC
      -pthread
      -fexceptions
      -fnon-call-exceptions
      -fvisibility=hidden
   )

 #  build_static_library (libgcc_eh "${task_dependencies}" "${task_source_files}" "${test_macros}" "${test_flags}" ${base})

   #add_definitions (${test_flags} ${test_macros})
   #add_definitions (-DIN_GCC )

   include_directories (${DIR_C_OBJS} ${DIR_REMNANTS}/include ${DIR_REMNANTS}/gcc)

   add_library (libgcc_eh STATIC ${task_source_files})

   remove_definitions (${test_macros} ${test_flags})

endfunction (build_libgcc_eh)



   set (base "${DIR_REMNANTS}/gcc")
   set (task_dependencies
      ${base}/unwind-pe.h
      ${base}/unwind.inc
      ${base}/unwind-dw2.h
      ${base}/unwind-dw2-fde.h
      ${base}/unwind-generic.h

      ${DIR_C_OBJS}/tconfig.h
   )
   set (task_source_files
      ${base}/gthr-gnat.c
      ${base}/unwind-dw2.c
      ${base}/unwind-dw2-fde.c
      ${base}/unwind-sjlj.c
      ${base}/unwind-c.c
    )
add_library (libgcc_eh STATIC ${task_source_files})

#build_libgcc_eh ()

