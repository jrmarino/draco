# This script determines the host triplet that is compatible with gcc.
# The following variables will be defined in the cache
#
#   HOST_TRIPLET
#   TARGET_TRIPLET
#
# If the triplet is provided during cmake configuration, that will be used,
# Otherwise this script will try to determine it.
#
#
#  =======================
#  =  Supported Systems  =
#  =======================
#
#  Since Draco will ultimately target LLVM, only the processors that have
#  LLVM backend support will be permitted.  The operating systems will be
#  limited to those that have GNAT available to them already (required for
#  the first bootstrap).  Technically LLVM can support IA64 and Alpha to
#  some degree, but these are dead/dying platforms so no effort is being
#  made to port Draco to these systems, at least initially.  The symbol
#  "[]" means a port should be possible, so a scar will be made for it.
#
#
#  System        x86  x86_64   ARM   MIPS32  Sparc32   PPC
#  ======================================================================
#  GNU/Linux      X       X     []             []       []
#  [Open]Solaris  X       X                    []
#  FreeBSD        X       X                             []
#  DragonflyBSD   X       X
#  NetBSD         X       X     []     []      []       []
#  OpenBSD        X       X     []             []       []
#  Mac OSX        []      []    []                      []
#  Windows        []      []
#  AIX                                                  []



function (verify_triplet TRIP_CANDIDATE MACHTYPE)

   string (TOUPPER "${MACHTYPE}_TRIPLET" cached_varname)
   set (triplet_pattern "^(..+)-(.+)-(..+)$")
   string (REGEX MATCH ${triplet_pattern} match_result ${TRIP_CANDIDATE})
   if (NOT "${match_result}" STREQUAL "")
      set (${cached_varname} ${TRIP_CANDIDATE} CACHE STRING
         "${MACHTYPE} machine triplet identifier (command-line)" FORCE)
   else ()
      message (FATAL_ERROR 
	"${MACHTYPE} triplet (${TRIP_CANDIDATE}) is formatted illegally")
   endif ()

endfunction (verify_triplet)




if ("${host}" STREQUAL "")

   set (valid_host_systems
         FreeBSD
         DragonFlyBSD
         OpenBSD
         NetBSD
         Linux
         SunOS
         Darwin
         AIX
         Windows
   )
   list (FIND valid_host_systems ${CMAKE_SYSTEM_NAME} list_index)
   if (${list_index} EQUAL -1)
      message (FATAL_ERROR "Sorry, this system <${CMAKE_SYSTEM_NAME}> is not a suitable host machine.")
   elseif (${WIN32})
      message (FATAL_ERROR "Sorry, we haven't gotten around to implementing Windows autofconf yet.")
   else ()
      execute_process(
         COMMAND uname -p
         OUTPUT_VARIABLE UNAME_PROCESSOR
         ERROR_QUIET
         OUTPUT_STRIP_TRAILING_WHITESPACE)
      execute_process(
         COMMAND uname -r
         OUTPUT_VARIABLE UNAME_RELEASE
         ERROR_QUIET
         OUTPUT_STRIP_TRAILING_WHITESPACE)

      if ("${UNAME_PROCESSOR}" STREQUAL "amd64")
         set (UNAME_PROCESSOR, "x86_64")
      endif ()
      string (TOLOWER ${CMAKE_SYSTEM_NAME} lowercase_os)
      set (tmp_arch   "---")
      set (tmp_vendor "unknown")
      set (tmp_os     ${lowercase_os})
      set (tmp_osver  ${UNAME_RELEASE})

      if ("${CMAKE_SYSTEM_NAME}" STREQUAL "NetBSD")

         #### HEAD: NetBSD ####
         if (   "${UNAME_PROCESSOR}" STREQUAL "i386"
             OR "${UNAME_PROCESSOR}" STREQUAL "x86_64"
             OR "${UNAME_PROCESSOR}" STREQUAL "sparc")
            set (tmp_arch "${UNAME_PROCESSOR}")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "hpcarm"
              OR "${UNAME_PROCESSOR}" STREQUAL "shark"
              OR "${UNAME_PROCESSOR}" STREQUAL "evbarm")
            set (tmp_arch "arm")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "rs6000"
              OR "${UNAME_PROCESSOR}" STREQUAL "macppc")
            set (tmp_arch "powerpc")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "evbmips"
              OR "${UNAME_PROCESSOR}" STREQUAL "arc")
            set (tmp_arch "mips")
         endif ()
         #### TAIL: NetBSD ####

      elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "OpenBSD")

         #### HEAD: OpenBSD ####
         if (   "${UNAME_PROCESSOR}" STREQUAL "i386"
             OR "${UNAME_PROCESSOR}" STREQUAL "x86_64"
             OR "${UNAME_PROCESSOR}" STREQUAL "sparc")
            set (tmp_arch "${UNAME_PROCESSOR}")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "armish")
            set (tmp_arch "arm")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "socppc"
              OR "${UNAME_PROCESSOR}" STREQUAL "macppc")
            set (tmp_arch "powerpc")
         endif ()
         #### TAIL: OpenBSD ####

      elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "FreeBSD")

         #### HEAD: FreeBSD ####
         if (   "${UNAME_PROCESSOR}" STREQUAL "i386"
             OR "${UNAME_PROCESSOR}" STREQUAL "x86_64"
             OR "${UNAME_PROCESSOR}" STREQUAL "powerpc")
            string (REGEX REPLACE "^([0-9.]+).*$" "\\1" justversion ${UNAME_RELEASE})
            set (tmp_arch  "${UNAME_PROCESSOR}")
            set (tmp_osver "${justversion}")
         endif ()
         #### TAIL: FreeBSD ####

      elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "DragonFlyBSD")

         #### HEAD: DragonFlyBSD ####
         if (   "${UNAME_PROCESSOR}" STREQUAL "i386"
             OR "${UNAME_PROCESSOR}" STREQUAL "x86_64")
            string (REGEX REPLACE "^([0-9.]+).*$" "\\1" justversion ${UNAME_RELEASE})
            set (tmp_arch   "${UNAME_PROCESSOR}")
            set (tmp_vendor "backplane")
            set (tmp_osver  "${justversion}")
         endif ()
         #### TAIL: DragonFlyBSD ####

      elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "SunOS")

         #### HEAD: SunOS ####
         string (REGEX REPLACE "^([0-9]+)[.][0-9]+$" "\\1" majorversion ${UNAME_RELEASE})
         string (REGEX REPLACE "^[0-9]+[.]([0-9]+)$" "\\1" minorversion ${UNAME_RELEASE})
         math (EXPR solvers "${majorversion} - 3")
         set (tmp_os     "solaris${solvers}.")
         set (tmp_osver  ${minorversion})
         if (   "${UNAME_PROCESSOR}" STREQUAL "i386"
             OR "${UNAME_PROCESSOR}" STREQUAL "x86_64")
            set (tmp_arch    "${UNAME_PROCESSOR}")
            set (tmp_vendor  "pc")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "sun4u")
            set (tmp_arch    "sparc")
            set (tmp_vendor  "sun")
         endif ()
         #### TAIL: SunOS ####

      elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "AIX")

         #### HEAD: AIX ####
         if ("${UNAME_PROCESSOR}" STREQUAL "powerpc")
            set (tmp_arch   "powerpc")
            set (tmp_vendor "ibm")
         endif ()
         #### TAIL: AIX ####

      elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")

         #### HEAD: Mac OSX ####
         if (   "${UNAME_PROCESSOR}" STREQUAL "i386"
             OR "${UNAME_PROCESSOR}" STREQUAL "x86_64")
            set (tmp_arch   "${UNAME_PROCESSOR}")
            set (tmp_vendor "apple")
         endif ()
         #### TAIL: Mac OSX ####

      elseif ("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")

         #### HEAD: Linux ####
         set (tmp_os     "linux-gnu")
         set (tmp_osver  "")
         if (   "${UNAME_PROCESSOR}" STREQUAL "i386"
             OR "${UNAME_PROCESSOR}" STREQUAL "i486"
             OR "${UNAME_PROCESSOR}" STREQUAL "i586"
             OR "${UNAME_PROCESSOR}" STREQUAL "i686"
             OR "${UNAME_PROCESSOR}" STREQUAL "x86_64"
             OR "${UNAME_PROCESSOR}" STREQUAL "sparc")
            set (tmp_arch   "${UNAME_PROCESSOR}")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "ppc")
            set (tmp_arch   "powerpc")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "armeb")
            set (tmp_arch   "arm")
         elseif ("${UNAME_PROCESSOR}" STREQUAL "armel")
            set (tmp_arch   "arm")
            set (tmp_os     "linux-gnueabi")
         endif ()
         #### TAIL: Linux ####

      endif ()

      if ("{${tmp_arch}" STREQUAL "---")
         message (FATAL_ERROR "This host machine was not recognized: 
CPU: ${UNAME_PROCESSOR} 
SYS: ${CMAKE_SYSTEM}")
      else ()
         set (HOST_TRIPLET "${tmp_arch}-${tmp_vendor}-${tmp_os}${tmp_osver}"
            CACHE STRING "Host machine triplet identifier (deduced)" FORCE)
      endif ()


   endif ()

else ()

   #  The script was configured with the {host} variable provided, so use it.
   verify_triplet (${host} "Host")

endif ()


# cross-compiler and xeno-compiler require a target to be defined.
# an fatal error will be thrown if the profile doesn't match
# e.g. no target provided when expected or target provide when not expected.

set (profiles_requiring_target 
   cross cross-base cross-lib cross-tools
   xeno   xeno-base  xeno-lib  xeno-tools
)

list (FIND profiles_requiring_target "${profile}" list_index)
if (${list_index} EQUAL -1)

   # This profile is asking for a native build, so we don't want a target
   if ("${target}" STREQUAL "")
      set (TARGET_TRIPLET ${HOST_TRIPLET} CACHE STRING 
          "Target machine triplet identifier (native build)" FORCE)      
   else ()
      message (FATAL_ERROR 
      "A native build profile has been requested.  Either change to a cross- or xeno-compiler profile, or rescind the <target> definition.")
   endif ()

else ()

   # This is a cross- or xeno-compiler profile which requires a target
   if ("${target}" STREQUAL "")
      message (FATAL_ERROR
      "A cross- or xeno-compiler profile has been requested without specifying a target.  Please add the <target> definition when invoking CMake.")
   else ()
      verify_triplet (${target} "Target")
   endif ()

endif ()
 