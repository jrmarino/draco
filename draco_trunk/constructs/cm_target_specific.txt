
   #  The script was configured with the {host} variable provided, so use it.

   set (triplet_pattern "^(..+)-(.+)-(..+)$")
   set (os_vers_pattern "^([^0-9]+)([0-9].*)$")
   string (REGEX MATCH ${triplet_pattern} match_result ${host})
   if (NOT "${match_result}" STREQUAL "")
      set (HOST_TRIPLET ${host} CACHE STRING
          "Host machine triplet identifier (via command-line)" FORCE)
      string (REGEX REPLACE ${triplet_pattern} "\\1" res1 ${host})
      string (REGEX REPLACE ${triplet_pattern} "\\2" res2 ${host})
      string (REGEX REPLACE ${triplet_pattern} "\\3" res3 ${host})
      set (HOST_CPU    ${res1} CACHE STRING
          "Host CPU (via command-line)" FORCE)
      set (HOST_VENDOR ${res2} CACHE STRING
          "OS Vendor (via command-line)" FORCE)
      string (REGEX MATCH ${os_vers_pattern} match_result ${res3})
      if (NOT "${match_result}" STREQUAL "")
         string (REGEX REPLACE ${os_vers_pattern} "\\1" res3A ${res3})
         string (REGEX REPLACE ${os_vers_pattern} "\\2" res3B ${res3})
         set (HOST_OPSYS ${res3A} CACHE STRING
             "Operating System (via command line)" FORCE)
         set (HOST_OSVER ${res3B} CACHE STRING
             "Operating System Version (via command line)" FORCE)
      else ()
         set (HOST_OPSYS ${res3}  CACHE STRING
             "Operating System (via command line)" FORCE)
         set (HOST_OSVER ""       CACHE STRING
             "Operating System Version" FORCE)
      endif ()
   else ()
      message (FATAL_ERROR "Provided <host> value is not in proper triplet form: ${host}")
   endif ()

#endif ()



# Set default cpu_type, tm_file, tm_p_file and xm_file so it can be
# updated in each machine entry.  Also set default extra_headers for some
# machines.  This mirrors the config.gcc functionality. If an entry is not
# found, we assume the passed <host> variable is the culprit

set (need_64bit_hwint "")

if ("${HOST_CPU}" STREQUAL "arm")

   set (cpu_type "arm")
   set (extra_headers
         mmintrin.h
         arm_neon.h
   )

elseif ("${HOST_CPU}" STREQUAL "i386"
     OR "${HOST_CPU}" STREQUAL "i486"
     OR "${HOST_CPU}" STREQUAL "i486"
     OR "${HOST_CPU}" STREQUAL "i486"
     OR "${HOST_CPU}" STREQUAL "x86_64")

   set (cpu_type "i386")
   set (extra_headers
         cpuid.h
         mmintrin.h
         mm3dnow.h
         xmmintrin.h
         emmintrin.h
         pmmintrin.h
         tmmintrin.h
         ammintrin.h
         smmintrin.h
         nmmintrin.h
         bmmintrin.h
         fma4intrin.h
         wmmintrin.h
		   immintrin.h
         x86intrin.h
         avxintrin.h
         xopintrin.h
		   ia32intrin.h
         cross-stdarg.h
         lwpintrin.h
         popcntintrin.h
		   abmintrin.h
   )
   if ("${HOST_CPU}" STREQUAL "x86_64")
      set (need_64bit_hwint "yes")
   endif ()

elseif ("${HOST_CPU}" STREQUAL "mips")

   set (cpu_type "mips")
   set (need_64bit_hwint "yes")
   set (extra_headers loongson.h)

elseif ("${HOST_CPU}" STREQUAL "powerpc")

   set (cpu_type "rs6000")
   set (extra_headers
         ppc-asm.h
         altivec.h
         spe.h
         ppu_intrinsics.h
         paired.h
         spu2vmx.h
         vec_types.h
         si2vmx.h
   )
   set (need_64bit_hwint "yes")

elseif ("${HOST_CPU}" STREQUAL "sparc")

   set (cpu_type "sparc")
   set (need_64bit_hwint "yes")
   set (extra_headers "")

endif ()


# this starts the tm_file list definition

set (tm_p_file "")
set (extra_modes "")
set (extra_options "")
set (tm_file "${cpu_type}/${cpu_type}.h")

if (EXISTS "${DIR_REMNANTS}/gcc/config/${cpu_type}/${cpu_type}-protos.h")
   set (tm_p_file "${cpu_type}/${cpu_type}-protos.h")
endif ()

if (EXISTS "${DIR_REMNANTS}/gcc/config/${cpu_type}/${cpu_type}-modes.def")
   set (extra_modes "${cpu_type}/${cpu_type}-modes.def")
endif ()

if (EXISTS "${DIR_REMNANTS}/gcc/config/${cpu_type}/${cpu_type}.opt")
   set (extra_options "${extra_options} ${cpu_type}/${cpu_type}.opt")
endif ()


if ("${HOST_CPU}" STREQUAL "x86_64")
   list (APPEND tm_file "i386/biarch64.h")
endif ()
if ("${cpu_type}" STREQUAL "i386")
   list (APPEND tm_file "vxworks-dummy.h")
endif ()


# Mac OS X
if ("${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
   list (APPEND tm_file
         darwin.h
         darwin9.h
         darwin10.h
         "${cpu_type}/darwin.h"
   )
   list (APPEND tm_p_file "darwin-protos.h")
   LIST (APPEND extra_options "darwin.opt")

   #thread_file='posix'
endif ()


case ${target} in
*-*-darwin*)
  tmake_file="t-darwin ${cpu_type}/t-darwin"
  tm_file="${tm_file} darwin.h"
  case ${target} in
  *-*-darwin9*)
    tm_file="${tm_file} darwin9.h"
    ;;
  *-*-darwin[12][0-9]*)
    tm_file="${tm_file} darwin9.h darwin10.h"
    ;;
  esac
  tm_file="${tm_file} ${cpu_type}/darwin.h"
  tm_p_file="${tm_p_file} darwin-protos.h"

  target_gtfiles="\$(srcdir)/config/darwin.c"
  extra_options="${extra_options} darwin.opt"
  c_target_objs="${c_target_objs} darwin-c.o"
  cxx_target_objs="${cxx_target_objs} darwin-c.o"
  fortran_target_objs="darwin-f.o"
  extra_objs="darwin.o"
  extra_gcc_objs="darwin-driver.o"
  default_use_cxa_atexit=yes
  use_gcc_stdint=wrap
  case ${enable_threads} in
    "" | yes | posix) thread_file='posix' ;;
  esac




