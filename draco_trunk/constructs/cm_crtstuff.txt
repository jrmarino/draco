##
##  DRACO ADA COMPILER
##  CMAKE BUILD SCRIPT - STATIC LIBRARY CRTSTUFF
##
##
##  Copyright (c) 2010, John Marino (www.auroraux.org)
##  All rights reserved.
##
##  Permission to use, copy, modify, and/or distribute this software for any
##  purpose with or without fee is hereby granted, provided that the above
##  copyright notice and this permission notice appear in all copies.
##
##  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
##  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
##  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
##  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
##  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
##  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
##  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
##





# Macro definitions.  These are same for native and xeno
set (task_macros
   -DIN_GCC
)


# Compiler flags.  Target values are constant,
# even between native and xeno builds (only host and compiler varies)
set (task_flags
   -O2
   ${CFLAGS_FOR_TARGET}
   ${LOOSE_WARN}
   ${C_LOOSE_WARN}
   -Wold-style-definition
   -g0
   -fno-zero-initialized-in-bss
   -fno-toplevel-reorder
   -fno-tree-vectorize
)



# defined include directories.  The c_objects needed to be removed later
# for cross-compiler profiles
set (Idirs
   -I${DIR_REMNANTS}/include
   -I${DIR_REMNANTS}/gcc
   -I${DIR_HEADERS}
)




# base directory for gcc files
#set (base ${DIR_REMNANTS}/gcc)

set (outfile1 ${CMAKE_CURRENT_BINARY_DIR}/crtbegin.o)
set (outfile2 ${CMAKE_CURRENT_BINARY_DIR}/crtend.o)
set (infile   ${DIR_REMNANTS}/gcc/crtstuff.c)



#Figure out which compiler to use
if (${CURRENT_STAGE} EQUAL 1)
   set (DRCC ${CMAKE_C_COMPILER})
   add_dependencies  (libgcc_stage1 crtstuff_stage1)
   add_custom_target (crtstuff_stage1 DEPENDS ${outfile1} ${outfile2})
elseif (${CURRENT_STAGE} EQUAL 2)

   add_dependencies  (libgcc_stage2 crtstuff_stage2)
   add_custom_target (crtstuff_stage2 DEPENDS ${outfile1} ${outfile2})

else (${CURRENT_STAGE} EQUAL 3)

   add_dependencies  (libgcc_stage3 crtstuff_stage3)
   add_custom_target (crtstuff_stage3 DEPENDS ${outfile1} ${outfile2})

endif ()



add_custom_command (
   OUTPUT ${outfile1}
   COMMAND ${DRCC} ${task_macros} ${task_flags}
            -DCRT_BEGIN ${Idirs}
            -c ${infile} -o ${outfile1}
)
add_custom_command (
   OUTPUT ${outfile2}
   COMMAND ${DRCC} ${task_macros} ${task_flags}
            -DCRT_END ${Idirs}
            -c ${infile} -o ${outfile2}
)






