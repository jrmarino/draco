##
##  DRACO ADA COMPILER
##  CMAKE BUILD SCRIPT - GENERATE INSN FILES
##
##
##  Copyright (c) 2010, John Marino (www.auroraux.org)
##  All rights reserved.
##
##  Permission to use, copy, modify, and/or distribute this software for any
##  purpose with or without fee is hereby granted, provided that the above
##  copyright notice and this permission notice appear in all copies.
##
##  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
##  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
##  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
##  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
##  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
##  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
##  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
##



# set base directory
set (base ${DIR_REMNANTS}/gcc)

#set includes
include_directories (
   ${CMAKE_CURRENT_BINARY_DIR}
   ${DIR_REMNANTS}/gcc
   ${DIR_REMNANTS}/include
   ${DIR_HEADERS}
)

add_definitions (
   -g
   -fkeep-inline-functions
   -DIN_GCC
   ${LOOSE_WARN}
   ${C_LOOSE_WARN}
   -Wmissing-format-attribute
   -pedantic
   -Wno-long-long
   -Wno-variadic-macros
   -Wno-overlength-strings
   -Wold-style-definition
   -fno-common
   -DHAVE_CONFIG_H
   -DGENERATOR_FILE
)

set (MDFILE ${DIR_REMNANTS}/gcc/config/${cpu_type}/${cpu_type}.md)

############## build_insn_generators ##############
# This function builds all the generators needed to make insn files

function (build_insn_generators)

   add_executable (genflags      ${base}/genflags.c insn-modes.h)
   add_executable (gencheck      ${base}/gencheck.c)
   add_executable (genmodes      ${base}/genmodes.c ${base}/errors.c)
   add_executable (genconstants  ${base}/genconstants.c)
   add_executable (gengtype      ${base}/gengtype.c)
   add_executable (genconditions ${base}/genconditions.c ${base}/vec.c insn-modes.h line-map.h)
   add_executable (gencondmd     gencondmd.c insn-constants.h)

   target_link_libraries (genmodes iberty)

endfunction (build_insn_generators)




############## build_insn_flags  ##############
# This functions builds the insn_flags.h header.  First a generator is
# compiled and then that generator is executed to produce the header.

function (build_insn_flags)

   add_custom_command (
      OUTPUT  insn-flags.h
      COMMAND genflags ${MDFILE} insn-conditions.md > insn-flags.h
      DEPENDS genflags insn-conditions.md insn-modes.h
   )

endfunction (build_insn_flags)




############## build_insn_conditions  ##############
function (build_insn_conditions)

   add_custom_command (
      OUTPUT insn-conditions.md
      COMMAND gencondmd > insn-conditions.md
      DEPENDS gencondmd
   )

endfunction (build_insn_conditions)



############## build_insn_gencondmd_c  ##############
function (build_insn_gencondmd_c)

   add_custom_command (
      OUTPUT gencondmd.c
      COMMAND genconditions ${MDFILE} > gencondmd.c
      DEPENDS genconditions ${MDFILE}
   )

endfunction (build_insn_gencondmd_c)



############## build_insn_modes  ##############
function (build_insn_modes)

   add_custom_command (
      OUTPUT insn-modes.c insn-modes.h
      COMMAND genmodes > insn-modes.c
      COMMAND genmodes -h > insn-modes.h
      DEPENDS genmodes
   )

endfunction (build_insn_modes)


############## create_all_tree_def ##############
function (create_all_tree_def)

   set (ATF all-tree.def)
   set (TREE     ${DIR_REMNANTS}/gcc/tree.def)
   set (ADA_TREE ${DIR_GCCINT}/ada-tree.def)
   file (WRITE  ${ATF} "#include \"${TREE}\"\n")
   file (APPEND ${ATF} "END_OF_BASE_TREE_CODES\n")
   file (APPEND ${ATF} "#include \"${ADA_TREE}\"\n")

endfunction (create_all_tree_def)


############## create_bversion ##############
function (create_bversion)

   string (STRIP "${BASEVER}" S_BASEVER)
   string (REGEX REPLACE "^([0-9][0-9]?).+$"                      "\\1" MAJOR ${S_BASEVER})
   string (REGEX REPLACE "^[0-9][0-9]?[.]([0-9][0-9]?).+"         "\\1" MINOR ${S_BASEVER})
   string (REGEX REPLACE "^[0-9][0-9]?[.][0-9][0-9]?[.]([0-9]+)$" "\\1" PATCHLEVEL ${S_BASEVER})

   math   (EXPR GCC_VERSION "${MAJOR} * 1000 + ${MINOR}")

   set (FN bversion.h)
   file (WRITE  ${FN} "#define BUILDING_GCC_MAJOR ${MAJOR}\n")
   file (APPEND ${FN} "#define BUILDING_GCC_MINOR ${MINOR}\n")
   file (APPEND ${FN} "#define BUILDING_GCC_PATCHLEVEL ${PATCHLEVEL}\n")
   file (APPEND ${FN} "#define BUILDING_GCC_VERSION ${GCC_VERSION}\n")

endfunction (create_bversion)



############## build_insn_constants  ##############
function (build_insn_constants)

   add_custom_command (
      OUTPUT  insn-constants.h
      COMMAND genconstants > insn-constants.h
      DEPENDS genconstants
   )

endfunction (build_insn_constants)




############## build_gtype_desc  ##############
function (build_gtype_desc)

   add_custom_command (
      OUTPUT insn-modes.c insn-modes.h
      COMMAND gengtype > insn-modes.c
      COMMAND genmodes -h > insn-modes.h
      DEPENDS genmodes
   )

endfunction (build_gtype_desc)




##########################################


file (COPY ${DIR_REMNANTS}/line-map.h DESTINATION .)
create_all_tree_def    ()
create_bversion        ()
build_insn_generators  ()
build_insn_constants   ()
build_insn_modes       ()
build_insn_gencondmd_c ()
build_insn_conditions  ()
build_insn_flags       ()

add_custom_target (insn_files DEPENDS
	insn-flags.h
	insn-modes.h
#   insn-constants.h
)
